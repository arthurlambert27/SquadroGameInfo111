#include "deplacement.h"
#include <assert.h>
#include <tuple>

int main(){
  std::tuple<std::vector<std::vector<int>>, std::vector<int>, int, int> plateau1;
  std::tuple<std::vector<std::vector<int>>, std::vector<int>, int, int> plateau2;
  std::vector<std::vector<int>> test;
  std::vector<std::vector<int>> test1;


  //Test 1
    plateau1 = deplace({
    {9,0,0,0,0,0,9},
    {1,0,0,0,0,0,0},
    {1,0,0,0,0,0,0},
    {1,0,0,0,0,0,0},
    {1,0,0,0,0,0,0},
    {1,0,0,0,0,0,0},
    {9,2,2,2,2,2,9}
  },{0,0,0,0,0,0,0,0,0,0},1,1);

  test = std::get<0>(plateau1);
  test1 = {
  {9,0,0,0,0,0,9},
  {0,1,0,0,0,0,0},
  {1,0,0,0,0,0,0},
  {1,0,0,0,0,0,0},
  {1,0,0,0,0,0,0},
  {1,0,0,0,0,0,0},
  {9,2,2,2,2,2,9}};
  assert( test == test1);


//test2
plateau1 = deplace({
{9,0,0,0,0,0,9},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{9,2,2,2,2,2,9}
},{0,0,0,0,0,0,0,0,0,0},2,3);
test = std::get<0>(plateau1);
test1 = {
{9,0,0,0,0,0,9},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{1,0,0,2,0,0,0},
{1,0,0,0,0,0,0},
{9,2,2,0,2,2,9}};
assert( test == test1);


//test3
plateau1 = deplace({
{9,0,0,0,0,0,9},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{0,0,0,0,0,0,1},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{9,2,2,2,2,2,9}
},{0,0,1,0,0,0,0,0,0,0},1,3);
test = std::get<0>(plateau1);
test1 = {
{9,0,0,0,0,0,9},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{0,0,0,0,1,0,0},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{9,2,2,2,2,2,9}};
assert( test == test1);


//test4
plateau1 = deplace({
{9,0,0,0,0,0,9},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{0,0,0,0,0,2,1},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{9,2,2,2,2,0,9}
},{0,0,1,0,0,0,0,0,0,0},1,3);
test = std::get<0>(plateau1);
test1 = {
{9,0,0,0,0,0,9},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{0,0,0,0,1,0,0},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{9,2,2,2,2,2,9}};
assert( test == test1);


//test4
plateau1 = deplace({
{9,0,0,0,0,0,9},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{0,0,0,0,2,2,1},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{9,2,2,2,0,0,9}
},{0,0,1,0,0,0,0,0,0,0},1,3);
test = std::get<0>(plateau1);
test1 = {
{9,0,0,0,0,0,9},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{0,0,0,1,0,0,0},
{1,0,0,0,0,0,0},
{1,0,0,0,0,0,0},
{9,2,2,2,2,2,9}};
assert( test == test1);





}
